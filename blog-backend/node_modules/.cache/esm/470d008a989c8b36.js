let Koa,Router,bodyParser,mongoose,api,jwtMiddleware,createFakeData;_989‍.w("koa",[["default",["Koa"],function(v){Koa=v}]]);_989‍.w("koa-router",[["default",["Router"],function(v){Router=v}]]);_989‍.w("koa-bodyparser",[["default",["bodyParser"],function(v){bodyParser=v}]]);_989‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}]]);_989‍.w("./api",[["default",["api"],function(v){api=v}]]);_989‍.w("./lib/jwtMiddleware",[["default",["jwtMiddleware"],function(v){jwtMiddleware=v}]]);_989‍.w("./createFakeData",[["default",["createFakeData"],function(v){createFakeData=v}]]);require('dotenv').config();










const { PORT, MONGO_URI } = process.env;

mongoose
    .connect(MONGO_URI, { useNewUrlParser: true, useFindAndModify: false })
    .then(() => {
        console.log('Connect to MongoDB');
        createFakeData();
    })
    .catch(e => {
        _989‍.g.console.error(e);
    });

const app = new Koa();
const router = new Router();

// 라우터 설정
router.use('/api', api.routes()); // api 라우트 적용

// 라우터 설정
app.use(bodyParser());
app.use(jwtMiddleware);

// app 인스턴스에 라우터 적용
app.use(router.routes()).use(router.allowedMethods());

const port = PORT || 4000;
app.listen(port, () => {
    _989‍.g.console.log('listening to port %d', port);
});